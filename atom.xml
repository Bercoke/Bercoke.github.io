<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-09-07T11:59:05.223Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Bercoke</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Data structure导引</title>
    <link href="http://example.com/2023/09/06/%E7%AE%97%E6%B3%95%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    <id>http://example.com/2023/09/06/%E7%AE%97%E6%B3%95%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</id>
    <published>2023-09-06T13:13:49.000Z</published>
    <updated>2023-09-07T11:59:05.223Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言">引言<a title="#引言" href="#引言"></a></h2><p>在利用计算机不断<code>解决问题（实现功能）</code>的过程中，会出现许多<code>重复性的问题</code>.</p><p>这些<code>共性问题</code>会产生一个个<code>解决方案</code>，这些解决方案就是<code>基础技术</code></p><p>这些基础技术包括：</p><ul><li>操作系统</li><li>数据库</li><li>网络协议  …</li></ul><p>这些基础技术建立在<code>对数据的组织与使用</code>上.</p><ul><li>数据结构 —&gt;  对数据的组织，来优化最基本的增删改查<ul><li>优化—&gt;使某种出现次数最多的操作耗时最短<ul><li>比如一个笔记本只需要查看，没人写。这时就可以牺牲<code>增、删、改</code>的复杂度，减小<code>查找</code>的复杂度</li></ul></li></ul></li><li>算法        —&gt;  基于不同数据结构，实现不同的功能，如排序，特殊的查找，区间操作等等</li></ul><h2 id="数据结构中的基础概念">数据结构中的基础概念<a title="#数据结构中的基础概念" href="#数据结构中的基础概念"></a></h2><h3 id="数据相关的概念">数据相关的概念<a title="#数据相关的概念" href="#数据相关的概念"></a></h3><ul><li><p>数据 ： 客观事物的<code>符号表示</code>. （用 <code>计算机的语言</code>  表达  <code>现实中的信息</code>）</p></li><li><p>数据元素： <code>数据</code>的基本单位，描述一个完整的对象，也叫<code>节点</code>，<code>记录</code>等等</p></li><li><p>数据项： 数据元素中 <code>最小可标识单位</code></p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//   一个链表节点 </span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> value;   —&gt;  数据项</span><br><span class="line">    Node *next;  —&gt;  数据项</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Node *p;   -&gt; 数据元素/对象</span><br></pre></td></tr></table></figure><h3 id="数据结构包括的内容">数据结构包括的内容<a title="#数据结构包括的内容" href="#数据结构包括的内容"></a></h3><h5 id="数据的逻辑结构">数据的逻辑结构<a title="#数据的逻辑结构" href="#数据的逻辑结构"></a></h5><blockquote><p>数据的逻辑结构是广义上的数据结构，表示的是<code>数据元素之间的关系</code></p></blockquote><p>包括</p><ul><li>线性表</li><li>树</li><li>图</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  a代表数据元素  ——&gt;  例如上面说的一个node（节点）</span></span><br><span class="line">a1 -&gt; a2 -&gt; a3     <span class="comment">// 一对一关系的叫线性表</span></span><br><span class="line">    </span><br><span class="line"> </span><br><span class="line">    a1</span><br><span class="line">  a2  a3</span><br><span class="line">a4  a5   a6        <span class="comment">// 一对多关系的叫树</span></span><br><span class="line">    </span><br><span class="line">   a1  a2</span><br><span class="line"> a3  a4  a5</span><br><span class="line">   a6  a7          <span class="comment">// 多对多关系的叫图 </span></span><br></pre></td></tr></table></figure><h5 id="数据的物理结构">数据的物理结构<a title="#数据的物理结构" href="#数据的物理结构"></a></h5><blockquote><p>数据的物理结构就是在计算机上的<code>存储结构</code></p></blockquote><p>包括：</p><ul><li>顺序存储： 用数组存储</li><li>链式存储： 用指针链接两个元素</li><li>散列存储（hash）：根据元素的<code>关键字</code> 通过<code>散列函数的计算</code>，得到一个<code>hash值</code>，作为<code>元素的地址</code></li><li>索引存储： 分别存储<code>数据项</code>和<code>数据项之间的关系</code>；数据间的关系通常以<code>索引表</code>的形式存储</li></ul><h5 id="数据的运算">数据的运算<a title="#数据的运算" href="#数据的运算"></a></h5><blockquote><p>对特定数据结构实行的操作，包括增、删、改、查、排序等等</p></blockquote><h3 id="算法的基本概念">算法的基本概念<a title="#算法的基本概念" href="#算法的基本概念"></a></h3><h5 id="算法的定义">算法的定义<a title="#算法的定义" href="#算法的定义"></a></h5><blockquote><p>算法是指：<code>解决问题</code>的<code>一系列步骤/步骤序列</code></p></blockquote><h5 id="算法必备的五要素">算法必备的五要素<a title="#算法必备的五要素" href="#算法必备的五要素"></a></h5><ul><li>有穷性： 操作次数有限，能执行完</li><li>确定性： 无二义性，每一个操作<code>对于相同输入都要得到相同输出</code></li><li>可行性： 每个操作都能实现（比如通过代码，通过运算等<code>基本操作</code>）</li><li>输入：   可以有<code>0个</code>/多个输入</li><li>输出：   至少有<code>1个</code>输出</li></ul><h5 id="评价算法好坏的四个标准">评价算法好坏的四个标准<a title="#评价算法好坏的四个标准" href="#评价算法好坏的四个标准"></a></h5><ul><li>正确性： 算法跑出来的结果是对的</li><li>可读性： 人能看懂，便于<code>理解、修改、调试</code></li><li>健壮性： 对于<code>错误的输入</code>或其他<code>异常</code>错误，可以做出<code>处理</code>，防止程序出现<code>不确定的执行</code></li><li>高效率： 通过评估<code>时间</code>和<code>空间</code>的占用情况评估性能</li></ul><h3 id="算法的效率">算法的效率<a title="#算法的效率" href="#算法的效率"></a></h3><h4 id="语言与算法执行效率的关系">语言与算法执行效率的关系<a title="#语言与算法执行效率的关系" href="#语言与算法执行效率的关系"></a></h4><blockquote><p>同一个算法，实现的语言级别越高，执行效率越低</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">越高级的语言它的每一个语句都经历过层层封装</span><br><span class="line">比如python的 a + b 会自动识别类型并扩充等操作。</span><br><span class="line">而c语言的 a + b 一旦类型出错执行就会错误</span><br><span class="line">因此越高级的语言它的执行效率越低</span><br><span class="line"><span class="comment"># 更高级语言例如 python &gt; java &gt; c++ &gt; c &gt; asm(汇编)</span></span><br></pre></td></tr></table></figure><h4 id="复杂度的分析-—-算法效率的评估指标">复杂度的分析 — 算法效率的<code>评估指标</code><a title="#复杂度的分析-—-算法效率的评估指标" href="#复杂度的分析-—-算法效率的评估指标"></a></h4><h5 id="引入概念">引入概念<a title="#引入概念" href="#引入概念"></a></h5><ul><li>问题规模： 问题规模<code>n</code>是指<code>算法的输入量</code>，就是<code>需要操作的数据元素的个数</code><ul><li>比如要排序一个数组，输入量就是    数组的长度</li><li>要操作一个树， 输入量就是    树的结点个数</li></ul></li><li>语句频度： 语句的执行次数，通常用<code>f(n)</code>表示，这里的<code>n就是问题规模</code></li><li>基本语句： 一个算法里<code>执行次数最多的语句</code>，一般在循环最内部</li><li>数量级：  这里的<code>f(n)</code>指的是基本语句的执行次数<ul><li>O(f(n))表示f(n)的数量级， 也就是f(n)里面最大的项<ul><li>比如 O(nlogn + n) = O(n)</li></ul></li><li>O(1) &lt; O(logn) &lt; O(n) &lt; O(nlogn) &lt; O(n²) &lt; O(n³) &lt; O(2^n) &lt; O(n!) &lt; O(n^n)</li></ul></li></ul><h5 id="时间复杂度">时间复杂度<a title="#时间复杂度" href="#时间复杂度"></a></h5><blockquote><p>基本语句的执行次数的数量级，也就是</p><ul><li>先确定基本语句（执行的最多的）</li><li>计算执行了多少次，写出表达式<code>f(n)</code></li><li>计算<code>f(n)</code>的数量级， <code>O(f(n))</code></li></ul></blockquote><h5 id="空间复杂度">空间复杂度<a title="#空间复杂度" href="#空间复杂度"></a></h5><blockquote><p>程序执行需要三种空间</p><ul><li>存储<code>输入输出数据</code>的空间</li><li>存储<code>可执行代码本身</code>的空间</li><li>操作数据所需要的<code>额外的空间</code></li></ul></blockquote><p>空间复杂度评估的是<code>额外空间的大小</code></p><p>注：</p><ul><li>算法不需要额外空间是指不需要任何额外空间</li><li><code>算法是原地工作的</code>是指<code>空间复杂度为O(1)</code>，也叫<code>算法所需空间大小与问题规模无关</code>，是<code>常数级别的</code></li><li>不使用额外空间   &lt;   算法原地工作</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;引言&quot;&gt;引言&lt;a title=&quot;#引言&quot; href=&quot;#引言&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在利用计算机不断&lt;code&gt;解决问题（实现功能）&lt;/code&gt;的过程中，会出现许多&lt;code&gt;重复性的问题&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;这些&lt;code&gt;共性问题&lt;/code</summary>
      
    
    
    
    
    <category term="数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>gitbook使用</title>
    <link href="http://example.com/2023/06/16/gitbook%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2023/06/16/gitbook%E4%BD%BF%E7%94%A8/</id>
    <published>2023-06-15T16:36:28.000Z</published>
    <updated>2023-06-15T17:19:14.093Z</updated>
    
    <content type="html"><![CDATA[<h3 id="gitbook使用">Gitbook使用<a title="#gitbook使用" href="#gitbook使用"></a></h3><h4 id="创建简单的gitbook">创建简单的gitbook<a title="#创建简单的gitbook" href="#创建简单的gitbook"></a></h4><p>为电子书创建目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> my-gitbook</span><br></pre></td></tr></table></figure><p>执行<code>gitbook init</code>命令，初始化电子书目录，执行结束后会出现<code>SUMMARY.md</code>和<code>README.md</code>文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitbook init</span><br></pre></td></tr></table></figure><p>生成动态网页，执行<code>gitbook server</code>启动web服务，默认端口4000</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitbook server</span><br></pre></td></tr></table></figure><p>浏览器输入<code>http://localhost:4000</code>，访问该电子书</p><blockquote><p>其他详细配置链接：<a href="https://blog.csdn.net/qq_41809023/article/details/127514108" target="_blank">https://blog.csdn.net/qq_41809023/article/details/127514108</a></p></blockquote><p>生成静态网页，静态HTML会输出到<code>_book</code>目录中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitbook build</span><br></pre></td></tr></table></figure><h4 id="解决gitbook-build静态网页无法跳转问题">解决gitbook build静态网页无法跳转问题<a title="#解决gitbook-build静态网页无法跳转问题" href="#解决gitbook-build静态网页无法跳转问题"></a></h4><p>在_book文件夹内，找到gitbook文件夹，在里面找到theme.js</p><p>用文本搜索工具查找</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(m)<span class="keyword">for</span>(n.<span class="property">handler</span>&amp;&amp;</span><br></pre></td></tr></table></figure><p>将<code>if(m)</code>改成<code>if(false)</code></p><p>再次打开_book下的网页，就可以正常跳转了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;gitbook使用&quot;&gt;Gitbook使用&lt;a title=&quot;#gitbook使用&quot; href=&quot;#gitbook使用&quot;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&quot;创建简单的gitbook&quot;&gt;创建简单的gitbook&lt;a title=&quot;#创建简单的gitbook&quot; hre</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>leetcode</title>
    <link href="http://example.com/2023/05/12/%E9%93%BE%E8%A1%A8/"/>
    <id>http://example.com/2023/05/12/%E9%93%BE%E8%A1%A8/</id>
    <published>2023-05-12T08:51:17.000Z</published>
    <updated>2023-05-12T09:02:59.610Z</updated>
    
    
    
    
    
    <category term="algorithm" scheme="http://example.com/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2023/03/16/hello-world/"/>
    <id>http://example.com/2023/03/16/hello-world/</id>
    <published>2023-03-16T14:28:00.768Z</published>
    <updated>2023-06-15T16:38:17.513Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank">GitHub</a>.</p><h2 id="quick-start">Quick Start<a title="#quick-start" href="#quick-start"></a></h2><h3 id="hexo命令找不到">hexo命令找不到<a title="#hexo命令找不到" href="#hexo命令找不到"></a></h3><p>将<code>hexo-blog\node_modules\hexo\bin</code>加入系统的<code>path</code>中</p><h3 id="create-a-new-post">Create a new post<a title="#create-a-new-post" href="#create-a-new-post"></a></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank">Writing</a></p><h3 id="run-server">Run server<a title="#run-server" href="#run-server"></a></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank">Server</a></p><h3 id="clean-static-files">Clean static files<a title="#clean-static-files" href="#clean-static-files"></a></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure><h3 id="generate-static-files">Generate static files<a title="#generate-static-files" href="#generate-static-files"></a></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank">Generating</a></p><h3 id="deploy-to-remote-sites">Deploy to remote sites<a title="#deploy-to-remote-sites" href="#deploy-to-remote-sites"></a></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; targe</summary>
      
    
    
    
    
  </entry>
  
</feed>
