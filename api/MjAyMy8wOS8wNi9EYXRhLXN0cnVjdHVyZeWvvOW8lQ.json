{"title":"Data structure导引","date":"2023-09-06T13:13:49.000Z","date_formatted":{"ll":"Sep 6, 2023","L":"09/06/2023","MM-DD":"09-06"},"link":"2023/09/06/Data-structure导引","tags":["数据结构"],"updated":"2023-09-07T11:59:05.223Z","content":"<h2 id=\"引言\">引言<a title=\"#引言\" href=\"#引言\"></a></h2>\n<p>在利用计算机不断<code>解决问题（实现功能）</code>的过程中，会出现许多<code>重复性的问题</code>.</p>\n<p>这些<code>共性问题</code>会产生一个个<code>解决方案</code>，这些解决方案就是<code>基础技术</code></p>\n<p>这些基础技术包括：</p>\n<ul>\n<li>操作系统</li>\n<li>数据库</li>\n<li>网络协议  …</li>\n</ul>\n<p>这些基础技术建立在<code>对数据的组织与使用</code>上.</p>\n<ul>\n<li>数据结构 —&gt;  对数据的组织，来优化最基本的增删改查\n<ul>\n<li>优化—&gt;使某种出现次数最多的操作耗时最短\n<ul>\n<li>比如一个笔记本只需要查看，没人写。这时就可以牺牲<code>增、删、改</code>的复杂度，减小<code>查找</code>的复杂度</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>算法        —&gt;  基于不同数据结构，实现不同的功能，如排序，特殊的查找，区间操作等等</li>\n</ul>\n<h2 id=\"数据结构中的基础概念\">数据结构中的基础概念<a title=\"#数据结构中的基础概念\" href=\"#数据结构中的基础概念\"></a></h2>\n<h3 id=\"数据相关的概念\">数据相关的概念<a title=\"#数据相关的概念\" href=\"#数据相关的概念\"></a></h3>\n<ul>\n<li>\n<p>数据 ： 客观事物的<code>符号表示</code>. （用 <code>计算机的语言</code>  表达  <code>现实中的信息</code>）</p>\n</li>\n<li>\n<p>数据元素： <code>数据</code>的基本单位，描述一个完整的对象，也叫<code>节点</code>，<code>记录</code>等等</p>\n</li>\n<li>\n<p>数据项： 数据元素中 <code>最小可标识单位</code></p>\n</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//   一个链表节点 </span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> value;   —&gt;  数据项</span><br><span class=\"line\">    Node *next;  —&gt;  数据项</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Node *p;   -&gt; 数据元素/对象</span><br></pre></td></tr></table></figure>\n<h3 id=\"数据结构包括的内容\">数据结构包括的内容<a title=\"#数据结构包括的内容\" href=\"#数据结构包括的内容\"></a></h3>\n<h5 id=\"数据的逻辑结构\">数据的逻辑结构<a title=\"#数据的逻辑结构\" href=\"#数据的逻辑结构\"></a></h5>\n<blockquote>\n<p>数据的逻辑结构是广义上的数据结构，表示的是<code>数据元素之间的关系</code></p>\n</blockquote>\n<p>包括</p>\n<ul>\n<li>线性表</li>\n<li>树</li>\n<li>图</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//  a代表数据元素  ——&gt;  例如上面说的一个node（节点）</span></span><br><span class=\"line\">a1 -&gt; a2 -&gt; a3     <span class=\"comment\">// 一对一关系的叫线性表</span></span><br><span class=\"line\">    </span><br><span class=\"line\"> </span><br><span class=\"line\">    a1</span><br><span class=\"line\">  a2  a3</span><br><span class=\"line\">a4  a5   a6        <span class=\"comment\">// 一对多关系的叫树</span></span><br><span class=\"line\">    </span><br><span class=\"line\">   a1  a2</span><br><span class=\"line\"> a3  a4  a5</span><br><span class=\"line\">   a6  a7          <span class=\"comment\">// 多对多关系的叫图 </span></span><br></pre></td></tr></table></figure>\n<h5 id=\"数据的物理结构\">数据的物理结构<a title=\"#数据的物理结构\" href=\"#数据的物理结构\"></a></h5>\n<blockquote>\n<p>数据的物理结构就是在计算机上的<code>存储结构</code></p>\n</blockquote>\n<p>包括：</p>\n<ul>\n<li>顺序存储： 用数组存储</li>\n<li>链式存储： 用指针链接两个元素</li>\n<li>散列存储（hash）：根据元素的<code>关键字</code> 通过<code>散列函数的计算</code>，得到一个<code>hash值</code>，作为<code>元素的地址</code></li>\n<li>索引存储： 分别存储<code>数据项</code>和<code>数据项之间的关系</code>；数据间的关系通常以<code>索引表</code>的形式存储</li>\n</ul>\n<h5 id=\"数据的运算\">数据的运算<a title=\"#数据的运算\" href=\"#数据的运算\"></a></h5>\n<blockquote>\n<p>对特定数据结构实行的操作，包括增、删、改、查、排序等等</p>\n</blockquote>\n<h3 id=\"算法的基本概念\">算法的基本概念<a title=\"#算法的基本概念\" href=\"#算法的基本概念\"></a></h3>\n<h5 id=\"算法的定义\">算法的定义<a title=\"#算法的定义\" href=\"#算法的定义\"></a></h5>\n<blockquote>\n<p>算法是指：<code>解决问题</code>的<code>一系列步骤/步骤序列</code></p>\n</blockquote>\n<h5 id=\"算法必备的五要素\">算法必备的五要素<a title=\"#算法必备的五要素\" href=\"#算法必备的五要素\"></a></h5>\n<ul>\n<li>有穷性： 操作次数有限，能执行完</li>\n<li>确定性： 无二义性，每一个操作<code>对于相同输入都要得到相同输出</code></li>\n<li>可行性： 每个操作都能实现（比如通过代码，通过运算等<code>基本操作</code>）</li>\n<li>输入：   可以有<code>0个</code>/多个输入</li>\n<li>输出：   至少有<code>1个</code>输出</li>\n</ul>\n<h5 id=\"评价算法好坏的四个标准\">评价算法好坏的四个标准<a title=\"#评价算法好坏的四个标准\" href=\"#评价算法好坏的四个标准\"></a></h5>\n<ul>\n<li>正确性： 算法跑出来的结果是对的</li>\n<li>可读性： 人能看懂，便于<code>理解、修改、调试</code></li>\n<li>健壮性： 对于<code>错误的输入</code>或其他<code>异常</code>错误，可以做出<code>处理</code>，防止程序出现<code>不确定的执行</code></li>\n<li>高效率： 通过评估<code>时间</code>和<code>空间</code>的占用情况评估性能</li>\n</ul>\n<h3 id=\"算法的效率\">算法的效率<a title=\"#算法的效率\" href=\"#算法的效率\"></a></h3>\n<h4 id=\"语言与算法执行效率的关系\">语言与算法执行效率的关系<a title=\"#语言与算法执行效率的关系\" href=\"#语言与算法执行效率的关系\"></a></h4>\n<blockquote>\n<p>同一个算法，实现的语言级别越高，执行效率越低</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">越高级的语言它的每一个语句都经历过层层封装</span><br><span class=\"line\">\t比如python的 a + b 会自动识别类型并扩充等操作。</span><br><span class=\"line\">\t而c语言的 a + b 一旦类型出错执行就会错误</span><br><span class=\"line\">因此越高级的语言它的执行效率越低</span><br><span class=\"line\"><span class=\"comment\"># 更高级语言例如 python &gt; java &gt; c++ &gt; c &gt; asm(汇编)</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"复杂度的分析-—-算法效率的评估指标\">复杂度的分析 — 算法效率的<code>评估指标</code><a title=\"#复杂度的分析-—-算法效率的评估指标\" href=\"#复杂度的分析-—-算法效率的评估指标\"></a></h4>\n<h5 id=\"引入概念\">引入概念<a title=\"#引入概念\" href=\"#引入概念\"></a></h5>\n<ul>\n<li>问题规模： 问题规模<code>n</code>是指<code>算法的输入量</code>，就是<code>需要操作的数据元素的个数</code>\n<ul>\n<li>比如要排序一个数组，输入量就是    数组的长度</li>\n<li>要操作一个树， 输入量就是    树的结点个数</li>\n</ul>\n</li>\n<li>语句频度： 语句的执行次数，通常用<code>f(n)</code>表示，这里的<code>n就是问题规模</code></li>\n<li>基本语句： 一个算法里<code>执行次数最多的语句</code>，一般在循环最内部</li>\n<li>数量级：  这里的<code>f(n)</code>指的是基本语句的执行次数\n<ul>\n<li>O(f(n))表示f(n)的数量级， 也就是f(n)里面最大的项\n<ul>\n<li>比如 O(nlogn + n) = O(n)</li>\n</ul>\n</li>\n<li>O(1) &lt; O(logn) &lt; O(n) &lt; O(nlogn) &lt; O(n²) &lt; O(n³) &lt; O(2^n) &lt; O(n!) &lt; O(n^n)</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"时间复杂度\">时间复杂度<a title=\"#时间复杂度\" href=\"#时间复杂度\"></a></h5>\n<blockquote>\n<p>基本语句的执行次数的数量级，也就是</p>\n<ul>\n<li>先确定基本语句（执行的最多的）</li>\n<li>计算执行了多少次，写出表达式<code>f(n)</code></li>\n<li>计算<code>f(n)</code>的数量级， <code>O(f(n))</code></li>\n</ul>\n</blockquote>\n<h5 id=\"空间复杂度\">空间复杂度<a title=\"#空间复杂度\" href=\"#空间复杂度\"></a></h5>\n<blockquote>\n<p>程序执行需要三种空间</p>\n<ul>\n<li>存储<code>输入输出数据</code>的空间</li>\n<li>存储<code>可执行代码本身</code>的空间</li>\n<li>操作数据所需要的<code>额外的空间</code></li>\n</ul>\n</blockquote>\n<p>空间复杂度评估的是<code>额外空间的大小</code></p>\n<p>注：</p>\n<ul>\n<li>算法不需要额外空间是指不需要任何额外空间</li>\n<li><code>算法是原地工作的</code>是指<code>空间复杂度为O(1)</code>，也叫<code>算法所需空间大小与问题规模无关</code>，是<code>常数级别的</code></li>\n<li>不使用额外空间   &lt;   算法原地工作</li>\n</ul>\n","next":{"title":"todo-list 使用","link":"2023/08/27/todo-list-使用"},"plink":"http://example.com/2023/09/06/Data-structure导引/","toc":[{"id":"引言","title":"引言","index":"1"},{"id":"数据结构中的基础概念","title":"数据结构中的基础概念","index":"2","children":[{"id":"数据相关的概念","title":"数据相关的概念","index":"2.1"},{"id":"数据结构包括的内容","title":"数据结构包括的内容","index":"2.2"},{"id":"算法的基本概念","title":"算法的基本概念","index":"2.3"},{"id":"算法的效率","title":"算法的效率","index":"2.4"}]}],"copyright":{"custom":"my copyright"},"reading_time":"1358 words in 7 min"}